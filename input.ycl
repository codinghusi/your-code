!import('./tokens')
!entrypoint(command)

#preOperators [ '+', '-', '++', '--', '!', '~' ]
#postOperators [ '++', '--' ]

#precedence [
    ['=', '+=', '-=', '/=', '*=', '%='],
    ['||'],
    ['&&'],
    ['<', '>', '<=', '>=', '==', '!='],
    ['*', '/', '%'],
    ['+', '-']
]

#allChars /[.\n]/
#endOfCommand ';'
#name {name} identifier



@string:
    #!openClose [ '"', "'" ]
    #notEscaped <!='\\'> -> $openClose
    $openClose => {value} $allChars <= $notEscaped

@number:
    {value} /-?\d+(?:\.\d+)/

@boolean:
    [ 'true', 'false' ]

@comment:
    {content} [
        '//' => {} $allChars <= '\n',
        '/*' => {} $allChars <= '*/'
    ]

@ifCondition:
    '(' -> {} expression -> ')'

@if:
    #condition {condition} ifCondition
    #thenBlock {then} command
    #elseBlock {else} command
    'if' -> $condition -> $thenBlock ~> ('else' -> $elseBlock)

@functionCall:
    #expr {} expression
    {parameters} '(' => $expr | ',' <= ')'

@arrayAccessor:
    '[' -> {index} expression -> ']'

@accessors:
    {} [
        {call} functionCall,
        {index} arrayAccessor
    ]

@identifier:
    /[a-zA-Z]\w*/

@chainable:
    #key {key} identifier
    #accessors {accessors} accessors
    #chain {chain} chain
    $key ~> $accessors ~> $chain

@chain:
    '.' -> chainable

@expressionWithoutOperation:
    #inBraces '(' -> {} expression -> ')' 
    {base} [
        instanciation,
        value,
        $inBraces
    ]
    ~> {accessors} accessors
    ~> {chain} chain

@expression: // with operation
    #leftHand {leftHand} $expr
    #operator {operator} $precedence
    #rightHand {rightHand} $expr
    #operation $leftHand -> $operator -> $rightHand
    #expr {} [
        {type: 'operation'} ($operation),
        {} expressionWithoutOperation
    ]
    $expr

@map:
    #key {key} [ identifier, string ]
    #value {value} expression
    {entries} '{' => $key -> ':' -> $value | ',' <= '}'

@array:
    {entries} '[' => expression | ',' <= ']'

@value:
    ~ {preOperator} $preOperators
    - {content} [ number, string, boolean, chainable ]
    ~ {postOperator} $postOperators

@assignment:
    '=' -> {} expression

@argument:
    $name ~> {default} assignment

@arguments:
    {} '(' => {} argument | ',' <= ')'

@function:
    $name -> {arguments} arguments -> {body} codeblock

@functionStandalone:
    'function' -> {} function

@variableDeclarationWithInit:
    ()=> $name -> {init} assignment | ',' <=()

@let:
    'let'   -> {variables} ()=> $name ~> {init} assignment | ',' <=()

@const:
    'const' -> {variables} variableDeclarationWithInit

@class:
    {members} 'class' -> $name -> '{' => [
        {variable} variableDeclarationWithInit -> $endOfCommand,
        {function} function
    ] <= '}'

@instanciation:
    'new' -> {class} identifier -> {call} functionCall

@command:
    -> {} [
        {} [ if, functionStandalone, class, codeblock ],
        {} [ let, const, expression ] -> ';'
    ]

@codeblock:
    {commands} '{' => command <= '}'